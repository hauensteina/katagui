{% extends 'layout.tmpl' %}

{% block css %}
<meta name='viewport' content='width=device-width, initial-scale=1'>
<style>
  :root {
    --BOARDSIZE: 55vw;
    --TBHEIGHT: 22vw;
    --LRWIDTH: 22vw;
    --BUTTON-GAP: 5vw;
    --CONTROL-LONG-SIDE: 35vw;
    --CONTROL-SHORT-SIDE: calc((var(--CONTROL-LONG-SIDE) - var(--BUTTON-GAP)) / 2.0);
  }

  .ahx-twocols {
    display: grid;
    grid-template-columns: 1fr 1fr;
    /* Two columns with equal width */
  }

  .ahx-tworows {
    display: grid;
    grid-template-rows: 1fr 1fr;
    /* Two rows with equal height */
  }

  .single-letter-button {
    background-color: #cc9966;
    border: none;
    color: black;
    padding: 0;
    /* Removes padding */
    margin: 0;
    /* Removes margin */
    font-size: 24px;
    font-family: Arial, sans-serif;
    font-weight: 1000;
  }
</style>

{% endblock css %}

{% block content %}
<br>
<!-- board with controls along edges -->
<div
  style='display:grid;grid-template-columns:var(--LRWIDTH) var(--BOARDSIZE) var(--LRWIDTH);grid-column-gap:0;justify-content:center;'
  class='xgreen-border'>
  <!-- left control -->
  <div class=xblue-border style='display:grid;align-items:center;justify-content:center;'>
    <div class='ahx-tworows xred-border'
      style='width:var(--CONTROL-SHORT-SIDE); height:var(--CONTROL-LONG-SIDE); grid-row-gap:var(--BUTTON-GAP);'>
      <button id=btn_right_left class='single-letter-button'
        style='display:grid;align-items:center;border-left: 6px solid #000;'>&#x2190;</button>
      <button id=btn_right_right class='single-letter-button'
        style='display:grid;align-items:center;border-left: 6px solid #000;'>&#x2192;</button>
    </div>
  </div> <!-- left pane -->

  <!-- center pane -->
  <div
    style='display:grid;grid-template-rows:var(--TBHEIGHT) var(--BOARDSIZE) var(--TBHEIGHT);justify-content:center;align-items:center;'
    class='xgreen-border'>
    <!-- top control -->
    <div class='ahx-twocols xred-border'
      style='width:var(--CONTROL-LONG-SIDE); height:var(--CONTROL-SHORT-SIDE); grid-column-gap:var(--BUTTON-GAP);margin:0 auto;'>
      <button id=btn_top_up class='single-letter-button'
        style='display:grid;align-items:center;border-top: 6px solid #000;'>&#x2191;</button>
      <button id=btn_top_down class='single-letter-button'
        style='display:grid;align-items:center;border-top: 6px solid #000;'>&#x2193;</button>
    </div>
    <!-- board -->
    <div id='boardDiv' class=xred-border
      style='width:var(--BOARDSIZE);height:var(--BOARDSIZE);margin-left:auto;margin-right:auto;'>
    </div>
    <!-- bottom control -->
    <div class='ahx-twocols xred-border'
      style='width:var(--CONTROL-LONG-SIDE); height:var(--CONTROL-SHORT-SIDE); grid-column-gap:var(--BUTTON-GAP);margin:0 auto;'>
      <button id=btn_bottom_up class='single-letter-button'
        style='display:grid;align-items:center;border-bottom: 6px solid #000;'>&#x2191;</button>
      <button id=btn_bottom_down class='single-letter-button'
        style='display:grid;align-items:center;border-bottom: 6px solid #000;'>&#x2193;</button>
    </div>
  </div> <!-- center pane -->

  <!-- right control -->
  <div class=xblue-border style='display:grid;align-items:center;justify-content:center;'>
    <div class='ahx-tworows xred-border'
      style='width:var(--CONTROL-SHORT-SIDE); height:var(--CONTROL-LONG-SIDE); grid-row-gap:var(--BUTTON-GAP);'>
      <button id=btn_left_left class='single-letter-button'
        style='display:grid;align-items:center;border-right: 6px solid #000;'>&#x2190;</button>
      <button id=btn_left_right class='single-letter-button'
        style='display:grid;align-items:center;border-right: 6px solid #000;'>&#x2192;</button>
    </div>
  </div> <!-- right pane -->

</div> <!-- board with controls along edges -->

<br>
<!-- Export button -->
<div>
  <button id=btn_export onclick='exportDiagram()' style='font-size:24px;font-family:Arial, sans-serif;background-color:#cccccc;color:black;padding:0 2vw;margin:0;
    border-color:black;border-width:1px;border-style:solid;border-radius: 1vw;'>Export</button>
</div>

<br>

{% endblock content %}

{% block js %}
<script>
  'use strict'
  const BLACK = 1
  const WHITE = 2
  const EMPTY = 0
  const TRIANGLE = '/'
  const CIRCLE = '0'
  const BOARDSIZE = 19

  var g_stonesJson = '{{ stones }}'
  var g_marksJson = '{{ marks }}'
  var g_stones = JSON.parse(g_stonesJson)
  var g_marks = JSON.parse(g_marksJson)
  var g_blackStones = []
  var g_whiteStones = []
  var g_mincol = 0
  var g_maxcol = 18
  var g_minrow = 0
  var g_maxrow = 18
  var g_boardDiv = document.getElementById('boardDiv')
  // Create canvas element
  const outerSize = parseInt(g_boardDiv.clientWidth)
  const g_canvas = document.createElement('canvas')
  g_canvas.width = outerSize
  g_canvas.height = outerSize
  g_boardDiv.appendChild(g_canvas)

  // Get black and white stones into lists
  for (var i = 0; i < g_stones.length; i++) {
    var row = g_stones[i]
    for (var j = 0; j < row.length; j++) {
      var stone = row[j]
      if (stone == 1) {
        g_blackStones.push({ x: i, y: j })
      } else if (stone == 2) {
        g_whiteStones.push({ x: i, y: j })
      }
    } // for 
  } // for 

  // Init page on load
  //--------------------------
  $(function () {
    const marg = 0.04 * g_canvas.width
    const tileSize = (g_canvas.width - 2 * marg) / (BOARDSIZE - 1)
    drawGoBoard(g_canvas, marg, tileSize, g_blackStones, g_whiteStones, g_marks, g_minrow, g_maxrow, g_mincol, g_maxcol)

    document.getElementById('btn_bottom_up').addEventListener('click', function () {
      g_maxrow = Math.max(g_maxrow - 1, 3)
      drawGoBoard(g_canvas, marg, tileSize, g_blackStones, g_whiteStones, g_marks, g_minrow, g_maxrow, g_mincol, g_maxcol)
    })
    document.getElementById('btn_bottom_down').addEventListener('click', function () {
      g_maxrow = Math.min(g_maxrow + 1, 18)
      drawGoBoard(g_canvas, marg, tileSize, g_blackStones, g_whiteStones, g_marks, g_minrow, g_maxrow, g_mincol, g_maxcol)
    })
    document.getElementById('btn_top_up').addEventListener('click', function () {
      g_minrow = Math.max(g_minrow - 1, 0)
      drawGoBoard(g_canvas, marg, tileSize, g_blackStones, g_whiteStones, g_marks, g_minrow, g_maxrow, g_mincol, g_maxcol)
    })
    document.getElementById('btn_top_down').addEventListener('click', function () {
      g_minrow = Math.min(g_minrow + 1, 15)
      drawGoBoard(g_canvas, marg, tileSize, g_blackStones, g_whiteStones, g_marks, g_minrow, g_maxrow, g_mincol, g_maxcol)
    })
    document.getElementById('btn_right_left').addEventListener('click', function () {
      g_mincol = Math.max(g_mincol - 1, 0)
      drawGoBoard(g_canvas, marg, tileSize, g_blackStones, g_whiteStones, g_marks, g_minrow, g_maxrow, g_mincol, g_maxcol)
    })
    document.getElementById('btn_right_right').addEventListener('click', function () {
      g_mincol = Math.min(g_mincol + 1, 15)
      drawGoBoard(g_canvas, marg, tileSize, g_blackStones, g_whiteStones, g_marks, g_minrow, g_maxrow, g_mincol, g_maxcol)
    })
    document.getElementById('btn_left_left').addEventListener('click', function () {
      g_maxcol = Math.max(g_maxcol - 1, 3)
      drawGoBoard(g_canvas, marg, tileSize, g_blackStones, g_whiteStones, g_marks, g_minrow, g_maxrow, g_mincol, g_maxcol)
    })
    document.getElementById('btn_left_right').addEventListener('click', function () {
      g_maxcol = Math.min(g_maxcol + 1, 18)
      drawGoBoard(g_canvas, marg, tileSize, g_blackStones, g_whiteStones, g_marks, g_minrow, g_maxrow, g_mincol, g_maxcol)
    })

    // For buttons, convert touchstart to click
    $('[id^=btn_]').on('touchstart', (e) => {
      e.preventDefault()
      e.target.click()
    })
    // For links, convert touchend to click
    $('a').on('touchend', (e) => {
      e.preventDefault()
      e.target.click()
    })
    // Touchend does nothing
    $('*').on('touchend', (e) => {
      e.preventDefault()
    })
  })

  //--------------------------------
  function exportDiagram() {
    const canvas = document.createElement('canvas')
    const width = g_maxcol - g_mincol
    const height = g_maxrow - g_minrow
    const tileSize = 100
    const marg = tileSize
    canvas.width = tileSize * width + 2 * marg
    canvas.height = tileSize * height + 2 * marg
    const trimFlag = true
    drawGoBoard(canvas, marg, tileSize, g_blackStones, g_whiteStones, g_marks, g_minrow, g_maxrow, g_mincol, g_maxcol, trimFlag)
    var dataURL = canvas.toDataURL('image/png')
    var link = document.createElement('a')
    link.download = 'diagram.png'
    link.href = dataURL
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
  } // exportDiagram()

  // Function to draw the board position and hilight a specified area.
  // Used both for screen and export.
  //--------------------------------------------------------------------------------------------------------------------------
  function drawGoBoard(canvas, marg, tileSize, blackStones, whiteStones, marks, minRow, maxRow, minCol, maxCol, trimFlag) {
    const boardwidth = canvas.width - 2 * marg
    const boardheight = canvas.height - 2 * marg

    const wSstoneRadius = tileSize * 0.47
    const bSstoneRadius = tileSize * 0.47
    const wStoneStrokeWidth = tileSize * 0.03
    const bStoneStrokeWidth = tileSize * 0.05
    const hoshiRadius = tileSize * 0.1
    const bgcolor = '#cc9966'
    const edgeLineWidth = tileSize * 0.06
    const innerLineWidth = tileSize * 0.04

    // Handicap points (hoshis) for a 19x19 board
    const hoshis = [{ x: 3, y: 3 }, { x: 3, y: 9 }, { x: 3, y: 15 }, { x: 9, y: 3 }, { x: 9, y: 9 }, { x: 9, y: 15 }, { x: 15, y: 3 }, { x: 15, y: 9 }, { x: 15, y: 15 }]

    const ctx = canvas.getContext('2d')
    const markFont1 = fittingFont(tileSize * 0.3, 1)
    const markFont2 = fittingFont(tileSize * 0.6, 2)
    const letterFont = fittingFont(tileSize * 0.4, 1)
    const xfont = fittingFont(tileSize * 0.4, 1)

    ctx.fillStyle = bgcolor
    ctx.fillRect(0, 0, canvas.width, canvas.height)
    drawLines()
    drawHoshis()
    blackStones.forEach(stone => drawStone(stone.x, stone.y, 'black'))
    whiteStones.forEach(stone => drawStone(stone.x, stone.y, 'white'))
    drawMarks()

    //--------------------------
    function drawLines() {
      ctx.strokeStyle = 'black'
      // Draw verticals
      for (let i = minCol; i <= maxCol; i++) {
        ctx.beginPath()
        ctx.lineWidth = (i === 0 || i === BOARDSIZE - 1) ? edgeLineWidth : innerLineWidth
        var topExtra = 0
        if (minRow > 0) { topExtra = 0.5 * tileSize }
        var bottomExtra = 0
        if (maxRow < BOARDSIZE - 1) { bottomExtra = 0.5 * tileSize }
        ctx.moveTo(sx(i), sy(minRow) - topExtra)
        ctx.lineTo(sx(i), sy(maxRow) + bottomExtra)
        ctx.stroke()
      }

      // Draw horizontals
      for (let i = minRow; i <= maxRow; i++) {
        ctx.beginPath()
        ctx.lineWidth = (i === 0 || i === BOARDSIZE - 1) ? edgeLineWidth : innerLineWidth
        var leftExtra = edgeLineWidth / 2
        if (minCol > 0) { leftExtra = 0.5 * tileSize }
        var rightExtra = edgeLineWidth / 2
        if (maxCol < BOARDSIZE - 1) { rightExtra = 0.5 * tileSize }
        ctx.moveTo(sx(minCol) - leftExtra, sy(i))
        ctx.lineTo(sx(maxCol) + rightExtra, sy(i))
        ctx.stroke()
      }
    } // drawLines()

    //------------------------------
    function drawHoshis() {
      // Draw handicap points (hoshis)
      hoshis.forEach(hoshi => {
        if (hoshi.x < minCol || hoshi.x > maxCol || hoshi.y < minRow || hoshi.y > maxRow) {
          return
        }
        ctx.beginPath()
        ctx.arc(sx(hoshi.x), sy(hoshi.y), hoshiRadius, 0, 2 * Math.PI)
        ctx.fillStyle = 'black'
        ctx.fill()
      })
    } // drawHoshis()

    // Function to draw a stone
    //-------------------------------------
    function drawStone(x, y, color) {
      ctx.beginPath()
      if (x < minCol || x > maxCol || y < minRow || y > maxRow) {
        return
      }
      var stoneRadius = (color == 'black') ? bSstoneRadius : wSstoneRadius
      if (color == 'black') {
        ctx.lineWidth = bStoneStrokeWidth
      } else {
        ctx.lineWidth = wStoneStrokeWidth
      }
      ctx.arc(sx(x), sy(y), stoneRadius, 0, 2 * Math.PI)
      ctx.fillStyle = color
      ctx.fill()
      ctx.stroke()
    } // drawStone()

    //-----------------------
    function drawMarks() {
      for (var i = 0; i < marks.length; i++) {
        var row = marks[i]
        for (var j = 0; j < row.length; j++) {
          if (i < minCol || i > maxCol || j < minRow || j > maxRow) {
            continue
          }
          var mark = row[j]
          if (mark.length > 0) {
            if (mark == '0') {
              drawCircle(i, j)
            } else if (mark == '/') {
              drawTriangle(i, j)
            } else {
              drawText(i, j, mark)
            }
          }
        } // for
      } // for
    } // drawMarks()

    //--------------------------------------
    function drawCircle(x, y) {
      ctx.beginPath()
      var lineWidth = tileSize * 0.04
      var radius = tileSize * 0.25
      var color = 'black'
      if (g_stones[x][y] == BLACK) {
        color = 'white'
        lineWidth = tileSize * 0.06
      }
      ctx.strokeStyle = color
      ctx.lineWidth = lineWidth
      ctx.arc(sx(x), sy(y), radius, 0, 2 * Math.PI)
      ctx.stroke()
    } // drawCircle()

    //---------------------------------
    function drawTriangle(x, y) {
      ctx.beginPath()
      var cos120 = -0.5
      var sin120 = 0.86602540378
      var r = tileSize * 0.40
      var p0 = { x: 0, y: r }
      var p1 = { x: sin120 * r, y: cos120 * r }
      var p2 = { x: -sin120 * r, y: cos120 * r }
      var lineWidth = tileSize * 0.07
      var color = 'black'
      if (g_stones[x][y] == BLACK) {
        color = 'white'
        lineWidth = tileSize * 0.05
      }
      else if (g_stones[x][y] == WHITE) {
        color = 'black'
        lineWidth = tileSize * 0.05
      }
      else {
        color = 'black'
        lineWidth = tileSize * 0.05
      }
      ctx.strokeStyle = color
      ctx.lineWidth = lineWidth
      ctx.moveTo(sx(x) + p0.x, sy(y) - p0.y)
      ctx.lineTo(sx(x) + p1.x, sy(y) - p1.y)
      ctx.lineTo(sx(x) + p2.x, sy(y) - p2.y)
      ctx.closePath()
      ctx.stroke()
    } // drawTriangle()

    //------------------------------------
    function drawText(x, y, text) {
      if (text.length == 0) { return }
      ctx.beginPath()
      if (g_stones[x][y] == EMPTY) {
        ctx.fillStyle = bgcolor
        ctx.fillRect(sx(x) - tileSize / 2, sy(y) - tileSize / 2, tileSize, tileSize)
      }
      if (text[0] == 'X') {
        ctx.font = xfont
      } else if (isNaN(parseInt(text[0]))) {
        ctx.font = letterFont
      } else if (text.length == 1) {
        ctx.font = markFont1
      } else {
        ctx.font = markFont2
      }
      ctx.fillStyle = 'black'
      if (g_stones[x][y] == BLACK) {
        ctx.fillStyle = 'white'
      }
      ctx.textAlign = 'center'
      ctx.textBaseline = 'middle'
      if (text[0] == 'X') {
        ctx.fillText(text, sx(x) - tileSize * 0.00, sy(y) + tileSize * 0.06)
      } else if (isNaN(parseInt(text[0]))) { // a letter
        ctx.fillText(text, sx(x) - tileSize * 0.015, sy(y) - tileSize * 0.01)
      } else if (text.length == 1) { // single digit
        ctx.fillText(text, sx(x) - tileSize * 0.015, sy(y) + tileSize * 0.025)
      } else if (text[0] == '1') { // two digits in the teens
        ctx.fillText(text, sx(x) - tileSize * 0.035, sy(y) + tileSize * 0.025)
      } else { // two digits >= 20
        ctx.fillText(text, sx(x) - tileSize * 0.01, sy(y) + tileSize * 0.025)
      }
    } // drawText()

    //----------------------------------- 
    function fittingFont(s, nletters) {
      nletters = nletters || 1
      const txt = '6'.repeat(nletters)
      var fontSize = 100 // Start with a large font size
      var font = ''

      while (true) {
        font = fontSize + "px Arial"; // Set the font size and type
        ctx.font = font
        var textWidth = ctx.measureText(txt).width
        //var textHeight = fontSize // Assume letter height is equal to font size
        //var textHeight = ctx.measureText('txt').height 

        // Check if the letter dimensions fit within the circle's diameter
        //if (textWidth <= s && textHeight <= s) {
        if (textWidth <= s) {
          return font
        }

        fontSize--
        if (fontSize <= 1) {
          break
        }
      } // while
      return font
    } // fittingFont()

    //----------------------
    function sx(col) {
      if (trimFlag) {
        return marg + col * tileSize - minCol * tileSize
      }
      return marg + col * tileSize
    }

    //---------------------
    function sy(row) {
      if (trimFlag) {
        return marg + row * tileSize - minRow * tileSize
      }
      return marg + row * tileSize
    }

  } // drawGoBoard()

</script>
{% endblock js %}